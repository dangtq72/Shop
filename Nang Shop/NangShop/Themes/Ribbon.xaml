<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ribbon="clr-namespace:Microsoft.Windows.Controls.Ribbon;assembly=RibbonControlsLibrary"  
                    xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=Microsoft.Windows.Shell"
                    xmlns:primitives="clr-namespace:Microsoft.Windows.Controls.Ribbon.Primitives;assembly=RibbonControlsLibrary" 
                    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <Style TargetType="{x:Type ribbon:RibbonTab}">
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Label Content="{Binding}" FontWeight="DemiBold" VerticalAlignment="Center" VerticalContentAlignment="Center"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--<Style TargetType="{x:Type ribbon:RibbonGroup}" >
        <Setter Property="Header" Value="{Binding Header}" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource RibbonButtonStyle}" />
        <Setter Property="ItemsSource" Value="{Binding Buttons}" />
        <Setter Property="BorderBrush" Value="Red"/>
        
    </Style>-->

    <Style TargetType="{x:Type ribbon:RibbonButton}" >
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="3"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="MouseOverBackground" Value="#B9B9B9"/>
                <Setter Property="MouseOverBorderBrush" Value="#B9B9B9"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="PressedBackground" Value="#F78A09"/>
                <Setter Property="PressedBorderBrush" Value="#F78A09"/>
            </Trigger>

            <Trigger Property="IsFocused" Value="True">
                <Setter Property="FocusedBackground" Value="#F78A09"/>
                <Setter Property="FocusedBorderBrush" Value="#F78A09"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ribbon:RibbonMenuButton}" >
        <!--<Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="3"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="MouseOverBackground" Value="#B9B9B9"/>
            </Trigger>

            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="PressedBackground" Value="#F78A09"/>
            </Trigger>

            <Trigger Property="IsDropDownPositionedAbove" Value="True">

            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownOpen" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsFocused" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="PressedBackground" Value="#F78A09"/>
                <Setter Property="MouseOverBackground" Value="#F78A09"/>
            </MultiTrigger>
        </Style.Triggers>-->
    </Style>

    <Style TargetType="{x:Type ribbon:RibbonMenuItem}" >
        <!--<Setter Property="Padding" Value="3"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="MouseOverBackground" Value="#F78A09"/>
                <Setter Property="MouseOverBorderBrush" Value="Transparent"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="PressedBackground" Value="#F78A09"/>
                <Setter Property="PressedBorderBrush" Value="Transparent"/>
            </Trigger>

            <Trigger Property="IsFocused" Value="True">
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <!--<Style x:Key="{x:Type ribbon:RibbonApplicationMenuItem}" TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Padding" Value="3,2,3,2" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
        
        <Setter Property="ribbon:RibbonControlService.FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="ribbon:RibbonControlService.FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
     
    </Style>-->
</ResourceDictionary>